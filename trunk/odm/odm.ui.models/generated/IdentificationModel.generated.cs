
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Collections.Generic;
using odm.infra;
namespace odm.models {
	

	public interface IIdentificationModel:INotifyPropertyChanged{
		string name{get;set;}
		string location{get;set;}
		string manufacturer{get;set;}
		string model{get;set;}
		string firmware{get;set;}
		string hardware{get;set;}
		string serial{get;set;}
		string host{get;set;}
		string mac{get;set;}
		string ip{get;set;}
		
	}

	public class IdentificationModel:IChangeTrackable<IIdentificationModel>, IIdentificationModel {
		private SimpleChangeTrackable<string> m_name;
		private SimpleChangeTrackable<string> m_location;
		private SimpleChangeTrackable<string> m_manufacturer;
		private SimpleChangeTrackable<string> m_model;
		private SimpleChangeTrackable<string> m_firmware;
		private SimpleChangeTrackable<string> m_hardware;
		private SimpleChangeTrackable<string> m_serial;
		private SimpleChangeTrackable<string> m_host;
		private SimpleChangeTrackable<string> m_mac;
		private SimpleChangeTrackable<string> m_ip;
		

		private class OriginAccessor: IIdentificationModel {
			private IdentificationModel m_model;
			public OriginAccessor(IdentificationModel model) {
				m_model = model;
			}
			private PropertyChangedEventHandler cb;
			private object sync = new object();
			event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged {
				add {
					lock(sync){
						cb += value;
					}
				}
				remove {
					lock(sync){
						cb -= value;
					}
				}
			}
			private void NotifyPropertyChanged(string propertyName){
				PropertyChangedEventHandler cb_copy = null;
				lock(sync){
					if(cb!=null){
						cb_copy = cb.Clone() as PropertyChangedEventHandler;
					}
				}
				if (cb_copy != null) {
					cb_copy(this, new PropertyChangedEventArgs(propertyName));
				}
			}
			string IIdentificationModel.name {
				get {return m_model.m_name.origin;}
				set {
					if(m_model.m_name.origin != value){
						m_model.m_name.origin = value;
						NotifyPropertyChanged("name");
					}
				}
			}
			string IIdentificationModel.location {
				get {return m_model.m_location.origin;}
				set {
					if(m_model.m_location.origin != value){
						m_model.m_location.origin = value;
						NotifyPropertyChanged("location");
					}
				}
			}
			string IIdentificationModel.manufacturer {
				get {return m_model.m_manufacturer.origin;}
				set {
					if(m_model.m_manufacturer.origin != value){
						m_model.m_manufacturer.origin = value;
						NotifyPropertyChanged("manufacturer");
					}
				}
			}
			string IIdentificationModel.model {
				get {return m_model.m_model.origin;}
				set {
					if(m_model.m_model.origin != value){
						m_model.m_model.origin = value;
						NotifyPropertyChanged("model");
					}
				}
			}
			string IIdentificationModel.firmware {
				get {return m_model.m_firmware.origin;}
				set {
					if(m_model.m_firmware.origin != value){
						m_model.m_firmware.origin = value;
						NotifyPropertyChanged("firmware");
					}
				}
			}
			string IIdentificationModel.hardware {
				get {return m_model.m_hardware.origin;}
				set {
					if(m_model.m_hardware.origin != value){
						m_model.m_hardware.origin = value;
						NotifyPropertyChanged("hardware");
					}
				}
			}
			string IIdentificationModel.serial {
				get {return m_model.m_serial.origin;}
				set {
					if(m_model.m_serial.origin != value){
						m_model.m_serial.origin = value;
						NotifyPropertyChanged("serial");
					}
				}
			}
			string IIdentificationModel.host {
				get {return m_model.m_host.origin;}
				set {
					if(m_model.m_host.origin != value){
						m_model.m_host.origin = value;
						NotifyPropertyChanged("host");
					}
				}
			}
			string IIdentificationModel.mac {
				get {return m_model.m_mac.origin;}
				set {
					if(m_model.m_mac.origin != value){
						m_model.m_mac.origin = value;
						NotifyPropertyChanged("mac");
					}
				}
			}
			string IIdentificationModel.ip {
				get {return m_model.m_ip.origin;}
				set {
					if(m_model.m_ip.origin != value){
						m_model.m_ip.origin = value;
						NotifyPropertyChanged("ip");
					}
				}
			}
			
		}
		private PropertyChangedEventHandler cb;
		private object sync = new object();
		public event PropertyChangedEventHandler PropertyChanged {
			add {
				lock(sync){
					cb += value;
				}
			}
			remove {
				lock(sync){
					cb -= value;
				}
			}
		}
		private void NotifyPropertyChanged(string propertyName){
			PropertyChangedEventHandler cb_copy = null;
			lock(sync){
				if(cb!=null){
					cb_copy = cb.Clone() as PropertyChangedEventHandler;
				}
			}
			if (cb_copy != null) {
				cb_copy(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		public string name  {
			get {return m_name.current;}
			set {
				if(m_name.current != value) {
					m_name.current = value;
					NotifyPropertyChanged("name");
				}
			}
		}
		
		public string location  {
			get {return m_location.current;}
			set {
				if(m_location.current != value) {
					m_location.current = value;
					NotifyPropertyChanged("location");
				}
			}
		}
		
		public string manufacturer  {
			get {return m_manufacturer.current;}
			set {
				if(m_manufacturer.current != value) {
					m_manufacturer.current = value;
					NotifyPropertyChanged("manufacturer");
				}
			}
		}
		
		public string model  {
			get {return m_model.current;}
			set {
				if(m_model.current != value) {
					m_model.current = value;
					NotifyPropertyChanged("model");
				}
			}
		}
		
		public string firmware  {
			get {return m_firmware.current;}
			set {
				if(m_firmware.current != value) {
					m_firmware.current = value;
					NotifyPropertyChanged("firmware");
				}
			}
		}
		
		public string hardware  {
			get {return m_hardware.current;}
			set {
				if(m_hardware.current != value) {
					m_hardware.current = value;
					NotifyPropertyChanged("hardware");
				}
			}
		}
		
		public string serial  {
			get {return m_serial.current;}
			set {
				if(m_serial.current != value) {
					m_serial.current = value;
					NotifyPropertyChanged("serial");
				}
			}
		}
		
		public string host  {
			get {return m_host.current;}
			set {
				if(m_host.current != value) {
					m_host.current = value;
					NotifyPropertyChanged("host");
				}
			}
		}
		
		public string mac  {
			get {return m_mac.current;}
			set {
				if(m_mac.current != value) {
					m_mac.current = value;
					NotifyPropertyChanged("mac");
				}
			}
		}
		
		public string ip  {
			get {return m_ip.current;}
			set {
				if(m_ip.current != value) {
					m_ip.current = value;
					NotifyPropertyChanged("ip");
				}
			}
		}
				
		public void AcceptChanges() {
			origin.name = name;
			origin.location = location;
			origin.manufacturer = manufacturer;
			origin.model = model;
			origin.firmware = firmware;
			origin.hardware = hardware;
			origin.serial = serial;
			origin.host = host;
			origin.mac = mac;
			origin.ip = ip;
			
		}

		public void RevertChanges() {
			name = origin.name;
			location = origin.location;
			manufacturer = origin.manufacturer;
			model = origin.model;
			firmware = origin.firmware;
			hardware = origin.hardware;
			serial = origin.serial;
			host = origin.host;
			mac = origin.mac;
			ip = origin.ip;
			
		}

		public bool isModified {
			get {
				if(m_name.isModified)return true;
				if(m_location.isModified)return true;
				if(m_manufacturer.isModified)return true;
				if(m_model.isModified)return true;
				if(m_firmware.isModified)return true;
				if(m_hardware.isModified)return true;
				if(m_serial.isModified)return true;
				if(m_host.isModified)return true;
				if(m_mac.isModified)return true;
				if(m_ip.isModified)return true;
				
				return false;
			}
		}

		public IIdentificationModel current {
			get {return this;}
			set {throw new NotImplementedException();}
		}

		public IIdentificationModel origin {
			get {return new OriginAccessor(this);}
			set {throw new NotImplementedException();}
		}
	}
}

	
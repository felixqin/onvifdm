
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Reactive.Disposables;
using System.Windows.Input;
using odm.infra;
namespace odm.ui.activities {
	
	public partial class CertificatesView{
		
		#region Model definition
		
		public class Model{
			
			public Model(
				Certificate[] certificates
			){
				
				this.certificates = certificates;
			}
			private Model(){
			}
			

			public static Model Create(
				Certificate[] certificates
			){
				var _this = new Model();
				
				_this.certificates = certificates;
				return _this;
			}
		
			public Certificate[] certificates{get;private set;}
		}
			
		#endregion
	
		#region Certificate definition
		
		public interface IModelAccessor{
			bool enabled{get;set;}
			
		}
		public class Certificate: IModelAccessor, INotifyPropertyChanged{
			
			public Certificate(
				byte[] data, string cid
			){
				
				this.data = data;
				this.cid = cid;
			}
			private Certificate(){
			}
			

			public static Certificate Create(
				byte[] data,
				string cid,
				bool enabled
			){
				var _this = new Certificate();
				
				_this.data = data;
				_this.cid = cid;
				_this.origin.enabled = enabled;
				_this.RevertChanges();
				
				return _this;
			}
		
				private SimpleChangeTrackable<bool> m_enabled;
				public byte[] data{get;private set;}
				public string cid{get;private set;}

			private class OriginAccessor: IModelAccessor {
				private Certificate m_model;
				public OriginAccessor(Certificate model) {
					m_model = model;
				}
				bool IModelAccessor.enabled {
					get {return m_model.m_enabled.origin;}
					set {m_model.m_enabled.origin = value;}
				}
				
			}
			public event PropertyChangedEventHandler PropertyChanged;
			private void NotifyPropertyChanged(string propertyName){
				var prop_changed = this.PropertyChanged;
				if (prop_changed != null) {
					prop_changed(this, new PropertyChangedEventArgs(propertyName));
				}
			}
			
			public bool enabled  {
				get {return m_enabled.current;}
				set {
					if(m_enabled.current != value) {
						m_enabled.current = value;
						NotifyPropertyChanged("enabled");
					}
				}
			}
			
			public void AcceptChanges() {
				m_enabled.AcceptChanges();
				
			}

			public void RevertChanges() {
				this.current.enabled= this.origin.enabled;
				
			}

			public bool isModified {
				get {
					if(m_enabled.isModified)return true;
					
					return false;
				}
			}

			public IModelAccessor current {
				get {return this;}
				
			}

			public IModelAccessor origin {
				get {return new OriginAccessor(this);}
				
			}
		}
			
		#endregion
	
		#region Result definition
		public abstract class Result{
			private Result() { }
			
			public abstract T Handle<T>(
				
				Func<Model,T> upload,
				Func<Model,string,T> delete,
				Func<Model,T> apply
			);
	
			public bool IsUpload(){
				return AsUpload() != null;
			}
			public virtual Upload AsUpload(){ return null; }
			public class Upload : Result {
				public Upload(Model model){
					
					this.model = model;
					
				}
				public Model model{ get; set; }
				public override Upload AsUpload(){ return this; }
				
				public override T Handle<T>(
				
					Func<Model,T> upload,
					Func<Model,string,T> delete,
					Func<Model,T> apply
				){
					return upload(
						model
					);
				}
	
			}
			
			public bool IsDelete(){
				return AsDelete() != null;
			}
			public virtual Delete AsDelete(){ return null; }
			public class Delete : Result {
				public Delete(Model model,string cid){
					
					this.model = model;
					
					this.cid = cid;
					
				}
				public Model model{ get; set; }public string cid{ get; set; }
				public override Delete AsDelete(){ return this; }
				
				public override T Handle<T>(
				
					Func<Model,T> upload,
					Func<Model,string,T> delete,
					Func<Model,T> apply
				){
					return delete(
						model,cid
					);
				}
	
			}
			
			public bool IsApply(){
				return AsApply() != null;
			}
			public virtual Apply AsApply(){ return null; }
			public class Apply : Result {
				public Apply(Model model){
					
					this.model = model;
					
				}
				public Model model{ get; set; }
				public override Apply AsApply(){ return this; }
				
				public override T Handle<T>(
				
					Func<Model,T> upload,
					Func<Model,string,T> delete,
					Func<Model,T> apply
				){
					return apply(
						model
					);
				}
	
			}
			
		}
		#endregion

		public ICommand UploadCommand{ get; private set; }
		public ICommand DeleteCommand{ get; private set; }
		public ICommand ApplyCommand{ get; private set; }
		
		IActivityContext<Result> activityContext = null;
		SingleAssignmentDisposable activityCancellationSubscription = new SingleAssignmentDisposable();
		bool activityCompleted = false;
		//activity has been completed
		event Action OnCompleted = null;
		//activity has been failed
		event Action<Exception> OnError = null;
		//activity has been completed successfully
		event Action<Result> OnSuccess = null;
		//activity has been canceled
		event Action OnCancelled = null;
		
		public CertificatesView(Model model, IActivityContext<Result> activityContext) {
			this.activityContext = activityContext;
			if(activityContext!=null){
				activityCancellationSubscription.Disposable = 
					activityContext.RegisterCancellationCallback(() => {
						EnsureAccess(() => {
							CompleteWith(() => {
								if(OnCancelled!=null){
									OnCancelled();
								}
							});
						});
					});
			}
			Init(model);
		}

		
		public void EnsureAccess(Action action){
			if(!CheckAccess()){
				Dispatcher.Invoke(action);
			}else{
				action();
			}
		}

		public void CompleteWith(Action cont){
			if(!activityCompleted){
				activityCompleted = true;
				cont();
				if(OnCompleted!=null){
					OnCompleted();
				}
				activityCancellationSubscription.Dispose();
			}
		}
		public void Success(Result result) {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Success(result);
				}
				if(OnSuccess!=null){
					OnSuccess(result);
				}
			});
		}
		public void Error(Exception error) {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Error(error);
				}
				if(OnError!=null){
					OnError(error);
				}
			});
		}
		public void Cancel() {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Cancel();
				}
				if(OnCancelled!=null){
					OnCancelled();
				}
			});
		}
		public void Success(Func<Result> resultFactory) {
			CompleteWith(() => {
				var result = resultFactory();
				if(activityContext!=null){
					activityContext.Success(result);
				}
				if(OnSuccess!=null){
					OnSuccess(result);
				}
			});
		}
		public void Error(Func<Exception> errorFactory) {
			CompleteWith(() => {
				var error = errorFactory();
				if(activityContext!=null){
					activityContext.Error(error);
				}
				if(OnError!=null){
					OnError(error);
				}
			});
		}
		public void Cancel(Action action) {
			CompleteWith(() => {
				action();
				if(activityContext!=null){
					activityContext.Cancel();
				}
				if(OnCancelled!=null){
					OnCancelled();
				}
			});
		}
		
	}
}

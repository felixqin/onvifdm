
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Reactive.Disposables;
using System.Windows.Input;
using odm.infra;
namespace odm.ui.activities {
	using global::onvif.services;
	
	public partial class MaintenanceView{
		
		#region Model definition
		
		public class Model{
			
			public Model(
				string firmwareVersion, Capabilities capabilities, bool isFirmwareUpgradeSupported
			){
				
				this.firmwareVersion = firmwareVersion;
				this.capabilities = capabilities;
				this.isFirmwareUpgradeSupported = isFirmwareUpgradeSupported;
			}
			private Model(){
			}
			

			public static Model Create(
				string firmwareVersion,
				Capabilities capabilities,
				bool isFirmwareUpgradeSupported
			){
				var _this = new Model();
				
				_this.firmwareVersion = firmwareVersion;
				_this.capabilities = capabilities;
				_this.isFirmwareUpgradeSupported = isFirmwareUpgradeSupported;
				return _this;
			}
		
			public string firmwareVersion{get;private set;}
			public Capabilities capabilities{get;private set;}
			public bool isFirmwareUpgradeSupported{get;private set;}
		}
			
		#endregion
	
		#region Result definition
		public abstract class Result{
			private Result() { }
			
			public abstract T Handle<T>(
				
				Func<string,T> backup,
				Func<string,T> restore,
				Func<T> softReset,
				Func<T> hardReset,
				Func<T> reboot,
				Func<string,T> upgrade,
				Func<T> close
			);
	
			public bool IsBackup(){
				return AsBackup() != null;
			}
			public virtual Backup AsBackup(){ return null; }
			public class Backup : Result {
				public Backup(string backupPath){
					
					this.backupPath = backupPath;
					
				}
				public string backupPath{ get; set; }
				public override Backup AsBackup(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return backup(
						backupPath
					);
				}
	
			}
			
			public bool IsRestore(){
				return AsRestore() != null;
			}
			public virtual Restore AsRestore(){ return null; }
			public class Restore : Result {
				public Restore(string backupPath){
					
					this.backupPath = backupPath;
					
				}
				public string backupPath{ get; set; }
				public override Restore AsRestore(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return restore(
						backupPath
					);
				}
	
			}
			
			public bool IsSoftReset(){
				return AsSoftReset() != null;
			}
			public virtual SoftReset AsSoftReset(){ return null; }
			public class SoftReset : Result {
				public SoftReset(){
					
				}
				
				public override SoftReset AsSoftReset(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return softReset(
						
					);
				}
	
			}
			
			public bool IsHardReset(){
				return AsHardReset() != null;
			}
			public virtual HardReset AsHardReset(){ return null; }
			public class HardReset : Result {
				public HardReset(){
					
				}
				
				public override HardReset AsHardReset(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return hardReset(
						
					);
				}
	
			}
			
			public bool IsReboot(){
				return AsReboot() != null;
			}
			public virtual Reboot AsReboot(){ return null; }
			public class Reboot : Result {
				public Reboot(){
					
				}
				
				public override Reboot AsReboot(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return reboot(
						
					);
				}
	
			}
			
			public bool IsUpgrade(){
				return AsUpgrade() != null;
			}
			public virtual Upgrade AsUpgrade(){ return null; }
			public class Upgrade : Result {
				public Upgrade(string firmwarePath){
					
					this.firmwarePath = firmwarePath;
					
				}
				public string firmwarePath{ get; set; }
				public override Upgrade AsUpgrade(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return upgrade(
						firmwarePath
					);
				}
	
			}
			
			public bool IsClose(){
				return AsClose() != null;
			}
			public virtual Close AsClose(){ return null; }
			public class Close : Result {
				public Close(){
					
				}
				
				public override Close AsClose(){ return this; }
				
				public override T Handle<T>(
				
					Func<string,T> backup,
					Func<string,T> restore,
					Func<T> softReset,
					Func<T> hardReset,
					Func<T> reboot,
					Func<string,T> upgrade,
					Func<T> close
				){
					return close(
						
					);
				}
	
			}
			
		}
		#endregion

		public ICommand BackupCommand{ get; private set; }
		public ICommand RestoreCommand{ get; private set; }
		public ICommand SoftResetCommand{ get; private set; }
		public ICommand HardResetCommand{ get; private set; }
		public ICommand RebootCommand{ get; private set; }
		public ICommand UpgradeCommand{ get; private set; }
		public ICommand CloseCommand{ get; private set; }
		
		IActivityContext<Result> activityContext = null;
		SingleAssignmentDisposable activityCancellationSubscription = new SingleAssignmentDisposable();
		bool activityCompleted = false;
		//activity has been completed
		event Action OnCompleted = null;
		//activity has been failed
		event Action<Exception> OnError = null;
		//activity has been completed successfully
		event Action<Result> OnSuccess = null;
		//activity has been canceled
		event Action OnCancelled = null;
		
		public MaintenanceView(Model model, IActivityContext<Result> activityContext) {
			this.activityContext = activityContext;
			if(activityContext!=null){
				activityCancellationSubscription.Disposable = 
					activityContext.RegisterCancellationCallback(() => {
						EnsureAccess(() => {
							CompleteWith(() => {
								if(OnCancelled!=null){
									OnCancelled();
								}
							});
						});
					});
			}
			Init(model);
		}

		
		public void EnsureAccess(Action action){
			if(!CheckAccess()){
				Dispatcher.Invoke(action);
			}else{
				action();
			}
		}

		public void CompleteWith(Action cont){
			if(!activityCompleted){
				activityCompleted = true;
				cont();
				if(OnCompleted!=null){
					OnCompleted();
				}
				activityCancellationSubscription.Dispose();
			}
		}
		public void Success(Result result) {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Success(result);
				}
				if(OnSuccess!=null){
					OnSuccess(result);
				}
			});
		}
		public void Error(Exception error) {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Error(error);
				}
				if(OnError!=null){
					OnError(error);
				}
			});
		}
		public void Cancel() {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Cancel();
				}
				if(OnCancelled!=null){
					OnCancelled();
				}
			});
		}
		public void Success(Func<Result> resultFactory) {
			CompleteWith(() => {
				var result = resultFactory();
				if(activityContext!=null){
					activityContext.Success(result);
				}
				if(OnSuccess!=null){
					OnSuccess(result);
				}
			});
		}
		public void Error(Func<Exception> errorFactory) {
			CompleteWith(() => {
				var error = errorFactory();
				if(activityContext!=null){
					activityContext.Error(error);
				}
				if(OnError!=null){
					OnError(error);
				}
			});
		}
		public void Cancel(Action action) {
			CompleteWith(() => {
				action();
				if(activityContext!=null){
					activityContext.Cancel();
				}
				if(OnCancelled!=null){
					OnCancelled();
				}
			});
		}
		
	}
}

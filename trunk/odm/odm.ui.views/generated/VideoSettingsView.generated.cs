
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Reactive.Disposables;
using System.Windows.Input;
using odm.infra;
namespace odm.ui.activities {
	using global::onvif.services;
	
	public partial class VideoSettingsView{
		
		#region Model definition
		
		public interface IModelAccessor{
			VideoResolution resolution{get;set;}
			double frameRate{get;set;}
			int encodingInterval{get;set;}
			float quality{get;set;}
			double bitrate{get;set;}
			int govLength{get;set;}
			VideoEncoding encoder{get;set;}
			
		}
		public class Model: IModelAccessor, INotifyPropertyChanged{
			
			public Model(
				string profToken, int maxFrameRate, int minFrameRate, int maxEncodingInterval, int minEncodingInterval, int maxQuality, int minQuality, int maxBitrate, int minBitrate, int maxGovLength, int minGovLength, VideoEncoderConfigurationOptions encoderOptions
			){
				
				this.profToken = profToken;
				this.maxFrameRate = maxFrameRate;
				this.minFrameRate = minFrameRate;
				this.maxEncodingInterval = maxEncodingInterval;
				this.minEncodingInterval = minEncodingInterval;
				this.maxQuality = maxQuality;
				this.minQuality = minQuality;
				this.maxBitrate = maxBitrate;
				this.minBitrate = minBitrate;
				this.maxGovLength = maxGovLength;
				this.minGovLength = minGovLength;
				this.encoderOptions = encoderOptions;
			}
			private Model(){
			}
			

			public static Model Create(
				string profToken,
				VideoResolution resolution,
				int maxFrameRate,
				int minFrameRate,
				double frameRate,
				int maxEncodingInterval,
				int minEncodingInterval,
				int encodingInterval,
				int maxQuality,
				int minQuality,
				float quality,
				int maxBitrate,
				int minBitrate,
				double bitrate,
				int maxGovLength,
				int minGovLength,
				int govLength,
				VideoEncoding encoder,
				VideoEncoderConfigurationOptions encoderOptions
			){
				var _this = new Model();
				
				_this.profToken = profToken;
				_this.maxFrameRate = maxFrameRate;
				_this.minFrameRate = minFrameRate;
				_this.maxEncodingInterval = maxEncodingInterval;
				_this.minEncodingInterval = minEncodingInterval;
				_this.maxQuality = maxQuality;
				_this.minQuality = minQuality;
				_this.maxBitrate = maxBitrate;
				_this.minBitrate = minBitrate;
				_this.maxGovLength = maxGovLength;
				_this.minGovLength = minGovLength;
				_this.encoderOptions = encoderOptions;
				_this.origin.resolution = resolution;
				_this.origin.frameRate = frameRate;
				_this.origin.encodingInterval = encodingInterval;
				_this.origin.quality = quality;
				_this.origin.bitrate = bitrate;
				_this.origin.govLength = govLength;
				_this.origin.encoder = encoder;
				_this.RevertChanges();
				
				return _this;
			}
		
				private SimpleChangeTrackable<VideoResolution> m_resolution;
				private SimpleChangeTrackable<double> m_frameRate;
				private SimpleChangeTrackable<int> m_encodingInterval;
				private SimpleChangeTrackable<float> m_quality;
				private SimpleChangeTrackable<double> m_bitrate;
				private SimpleChangeTrackable<int> m_govLength;
				private SimpleChangeTrackable<VideoEncoding> m_encoder;
				public string profToken{get;private set;}
				public int maxFrameRate{get;private set;}
				public int minFrameRate{get;private set;}
				public int maxEncodingInterval{get;private set;}
				public int minEncodingInterval{get;private set;}
				public int maxQuality{get;private set;}
				public int minQuality{get;private set;}
				public int maxBitrate{get;private set;}
				public int minBitrate{get;private set;}
				public int maxGovLength{get;private set;}
				public int minGovLength{get;private set;}
				public VideoEncoderConfigurationOptions encoderOptions{get;private set;}

			private class OriginAccessor: IModelAccessor {
				private Model m_model;
				public OriginAccessor(Model model) {
					m_model = model;
				}
				VideoResolution IModelAccessor.resolution {
					get {return m_model.m_resolution.origin;}
					set {m_model.m_resolution.origin = value;}
				}
				double IModelAccessor.frameRate {
					get {return m_model.m_frameRate.origin;}
					set {m_model.m_frameRate.origin = value;}
				}
				int IModelAccessor.encodingInterval {
					get {return m_model.m_encodingInterval.origin;}
					set {m_model.m_encodingInterval.origin = value;}
				}
				float IModelAccessor.quality {
					get {return m_model.m_quality.origin;}
					set {m_model.m_quality.origin = value;}
				}
				double IModelAccessor.bitrate {
					get {return m_model.m_bitrate.origin;}
					set {m_model.m_bitrate.origin = value;}
				}
				int IModelAccessor.govLength {
					get {return m_model.m_govLength.origin;}
					set {m_model.m_govLength.origin = value;}
				}
				VideoEncoding IModelAccessor.encoder {
					get {return m_model.m_encoder.origin;}
					set {m_model.m_encoder.origin = value;}
				}
				
			}
			public event PropertyChangedEventHandler PropertyChanged;
			private void NotifyPropertyChanged(string propertyName){
				var prop_changed = this.PropertyChanged;
				if (prop_changed != null) {
					prop_changed(this, new PropertyChangedEventArgs(propertyName));
				}
			}
			
			public VideoResolution resolution  {
				get {return m_resolution.current;}
				set {
					if(m_resolution.current != value) {
						m_resolution.current = value;
						NotifyPropertyChanged("resolution");
					}
				}
			}
			
			public double frameRate  {
				get {return m_frameRate.current;}
				set {
					if(m_frameRate.current != value) {
						m_frameRate.current = value;
						NotifyPropertyChanged("frameRate");
					}
				}
			}
			
			public int encodingInterval  {
				get {return m_encodingInterval.current;}
				set {
					if(m_encodingInterval.current != value) {
						m_encodingInterval.current = value;
						NotifyPropertyChanged("encodingInterval");
					}
				}
			}
			
			public float quality  {
				get {return m_quality.current;}
				set {
					if(m_quality.current != value) {
						m_quality.current = value;
						NotifyPropertyChanged("quality");
					}
				}
			}
			
			public double bitrate  {
				get {return m_bitrate.current;}
				set {
					if(m_bitrate.current != value) {
						m_bitrate.current = value;
						NotifyPropertyChanged("bitrate");
					}
				}
			}
			
			public int govLength  {
				get {return m_govLength.current;}
				set {
					if(m_govLength.current != value) {
						m_govLength.current = value;
						NotifyPropertyChanged("govLength");
					}
				}
			}
			
			public VideoEncoding encoder  {
				get {return m_encoder.current;}
				set {
					if(m_encoder.current != value) {
						m_encoder.current = value;
						NotifyPropertyChanged("encoder");
					}
				}
			}
			
			public void AcceptChanges() {
				m_resolution.AcceptChanges();
				m_frameRate.AcceptChanges();
				m_encodingInterval.AcceptChanges();
				m_quality.AcceptChanges();
				m_bitrate.AcceptChanges();
				m_govLength.AcceptChanges();
				m_encoder.AcceptChanges();
				
			}

			public void RevertChanges() {
				this.current.resolution= this.origin.resolution;
				this.current.frameRate= this.origin.frameRate;
				this.current.encodingInterval= this.origin.encodingInterval;
				this.current.quality= this.origin.quality;
				this.current.bitrate= this.origin.bitrate;
				this.current.govLength= this.origin.govLength;
				this.current.encoder= this.origin.encoder;
				
			}

			public bool isModified {
				get {
					if(m_resolution.isModified)return true;
					if(m_frameRate.isModified)return true;
					if(m_encodingInterval.isModified)return true;
					if(m_quality.isModified)return true;
					if(m_bitrate.isModified)return true;
					if(m_govLength.isModified)return true;
					if(m_encoder.isModified)return true;
					
					return false;
				}
			}

			public IModelAccessor current {
				get {return this;}
				
			}

			public IModelAccessor origin {
				get {return new OriginAccessor(this);}
				
			}
		}
			
		#endregion
	
		#region Result definition
		public abstract class Result{
			private Result() { }
			
			public abstract T Handle<T>(
				
				Func<Model,T> apply,
				Func<T> none
			);
	
			public bool IsApply(){
				return AsApply() != null;
			}
			public virtual Apply AsApply(){ return null; }
			public class Apply : Result {
				public Apply(Model model){
					
					this.model = model;
					
				}
				public Model model{ get; set; }
				public override Apply AsApply(){ return this; }
				
				public override T Handle<T>(
				
					Func<Model,T> apply,
					Func<T> none
				){
					return apply(
						model
					);
				}
	
			}
			
			public bool IsNone(){
				return AsNone() != null;
			}
			public virtual None AsNone(){ return null; }
			public class None : Result {
				public None(){
					
				}
				
				public override None AsNone(){ return this; }
				
				public override T Handle<T>(
				
					Func<Model,T> apply,
					Func<T> none
				){
					return none(
						
					);
				}
	
			}
			
		}
		#endregion

		public ICommand ApplyCommand{ get; private set; }
		public ICommand NoneCommand{ get; private set; }
		
		IActivityContext<Result> activityContext = null;
		SingleAssignmentDisposable activityCancellationSubscription = new SingleAssignmentDisposable();
		bool activityCompleted = false;
		//activity has been completed
		event Action OnCompleted = null;
		//activity has been failed
		event Action<Exception> OnError = null;
		//activity has been completed successfully
		event Action<Result> OnSuccess = null;
		//activity has been canceled
		event Action OnCancelled = null;
		
		public VideoSettingsView(Model model, IActivityContext<Result> activityContext) {
			this.activityContext = activityContext;
			if(activityContext!=null){
				activityCancellationSubscription.Disposable = 
					activityContext.RegisterCancellationCallback(() => {
						EnsureAccess(() => {
							CompleteWith(() => {
								if(OnCancelled!=null){
									OnCancelled();
								}
							});
						});
					});
			}
			Init(model);
		}

		
		public void EnsureAccess(Action action){
			if(!CheckAccess()){
				Dispatcher.Invoke(action);
			}else{
				action();
			}
		}

		public void CompleteWith(Action cont){
			if(!activityCompleted){
				activityCompleted = true;
				cont();
				if(OnCompleted!=null){
					OnCompleted();
				}
				activityCancellationSubscription.Dispose();
			}
		}
		public void Success(Result result) {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Success(result);
				}
				if(OnSuccess!=null){
					OnSuccess(result);
				}
			});
		}
		public void Error(Exception error) {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Error(error);
				}
				if(OnError!=null){
					OnError(error);
				}
			});
		}
		public void Cancel() {
			CompleteWith(() => {
				if(activityContext!=null){
					activityContext.Cancel();
				}
				if(OnCancelled!=null){
					OnCancelled();
				}
			});
		}
		public void Success(Func<Result> resultFactory) {
			CompleteWith(() => {
				var result = resultFactory();
				if(activityContext!=null){
					activityContext.Success(result);
				}
				if(OnSuccess!=null){
					OnSuccess(result);
				}
			});
		}
		public void Error(Func<Exception> errorFactory) {
			CompleteWith(() => {
				var error = errorFactory();
				if(activityContext!=null){
					activityContext.Error(error);
				}
				if(OnError!=null){
					OnError(error);
				}
			});
		}
		public void Cancel(Action action) {
			CompleteWith(() => {
				action();
				if(activityContext!=null){
					activityContext.Cancel();
				}
				if(OnCancelled!=null){
					OnCancelled();
				}
			});
		}
		
	}
}
